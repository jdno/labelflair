---
name: Continuous Integration

"on":
  pull_request:
  workflow_dispatch:

permissions: {}

jobs:
  targets:
    name: Enumerate Just recipes
    runs-on: ubuntu-latest

    permissions:
      contents: read

    outputs:
      matrix: ${{ steps.export-targets.outputs.targets }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0
        with:
          persist-credentials: false

      - name: Install Just
        uses: taiki-e/install-action@ad95d4e02e061d4390c4b66ef5ed56c7fee3d2ce # 2.58.17
        with:
          tool: just

      - name: Export targets
        id: export-targets
        run: echo "targets=$(just --list | awk '/build-|check-|format-|lint-|test-/{print $1}' | jq -cnR '[inputs]')" >> "$GITHUB_OUTPUT"

  checks:
    name: ${{ matrix.target }}
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read

    needs: targets

    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # 5.0.0
        with:
          persist-credentials: false

      - name: Install Flox
        uses: flox/install-flox-action@ba0eb4eb776f1d3b47279d7980f6643caffd8c41 # 2.0.0
        with:
          version: 1.6.1

      - name: Remove Flox installer (if it exists)
        run: rm -f flox.x86_64-linux.deb

      - name: Run check with Just
        uses: flox/activate-action@bdcbcf8d84af6f503e588ae4125e48133787df95 # 1.0.0
        with:
          command: just ${{ matrix.target }}

  success:
    name: All checks succeeded
    runs-on: ubuntu-latest

    permissions: {}

    needs: checks
    if: always()

    steps:
      - name: Check if all checks succeeded
        # `needs` is a list of job names, which themselves are generated from
        # the output of `just --list`, so we ignore the template injection here.
        # zizmor: ignore[template-injection]
        run: jq --exit-status 'all(.result == "success")' <<< '${{ toJson(needs) }}'
